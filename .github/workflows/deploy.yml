---
name: Deploy workflow

on:
  workflow_dispatch:
    inputs:
      comments:
        description: Comments
        required: false

jobs:
  release_changelog:
    name: Release changelog
    runs-on: ubuntu-latest

    steps:
      - name: Print author
        run: |
          echo "Author: ${{ github.triggering_actor }}"
          echo "Comments: ${{ github.event.inputs.comments }}"

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"

      - uses: actions/checkout@master
        with:
          ref: ${{ steps.extract_branch.outputs.branch }}

      - name: Draft change log
        uses: release-drafter/release-drafter@v5
        id: release-drafter
        with:
          commitish: ${{ steps.extract_branch.outputs.branch }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set new release version
        env:
          RD_RELEASE: ${{ steps.release-drafter.outputs.name }}
        run: |
          if [ ! -z "$RD_RELEASE" ]; then
            echo "NEW_RELEASE=$RD_RELEASE" >> $GITHUB_ENV
          else
            echo "NEW_RELEASE=0.1.0" >> $GITHUB_ENV
          fi

      - name: Update version in pyproject.toml
        uses: jacobtomlinson/gha-find-replace@master
        with:
          include: pyproject.toml
          find: version = "(?:([0-9]+\.[0-9]+\.[0-9]+.+)|([0-9]+\.[0-9]+\.[0-9]+))"
          replace: version = "${{ env.NEW_RELEASE }}"

      - name: Commit updates
        env:
          LATEST_VERSION: ${{ env.NEW_RELEASE }}
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git diff-index --quiet HEAD || git commit -m "Bump version to $LATEST_VERSION" -a

      - name: Push changes
        uses: CasperWA/push-protected@v2
        with:
          token: ${{ secrets.BP_PAT_TOKEN }}
          unprotect_reviews: true

      - name: Publish change log
        uses: release-drafter/release-drafter@v5
        with:
          commitish: ${{ steps.extract_branch.outputs.branch }}
          publish: true
          name: ${{ env.NEW_RELEASE }}
          tag: v${{ env.NEW_RELEASE }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # deploy_pypi:
  #   name: PyPI Deploy
  #   runs-on: ubuntu-latest
  #   needs: [release_changelog]

  #   steps:
  #     - uses: actions/checkout@master
  #       with:
  #         ref: ${{ steps.extract_branch.outputs.branch }}

  #     - name: Set up Python
  #       uses: actions/setup-python@v4.3.1
  #       with:
  #         python-version: '3.9'

  #     #----------------------------------------------
  #     #  -----  install & configure poetry  -----
  #     #----------------------------------------------
  #     - name: Install Poetry
  #       uses: snok/install-poetry@v1
  #       with:
  #         virtualenvs-create: true
  #         virtualenvs-in-project: true

  #     - name: Build and publish
  #       env:
  #         POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
  #       run: |
  #         poetry publish --build

  deploy_docker:
    name: Docker deploy
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    needs: [release_changelog]

    steps:
      - name: Check out repo
        uses: actions/checkout@master

      - name: Login to Docker hub
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to container registry
        uses: docker/login-action@v2.1.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        uses: docker/metadata-action@v4.1.1
        id: metadata
        with:
          images: |
            ${{ github.repository }}
            ghcr.io/${{ github.repository }}

      - name: Build and push docker image
        uses: docker/build-push-action@v3.2.0
        with:
          context: .
          push: true
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
